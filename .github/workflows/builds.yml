name: Build tests

on:
  release:

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build_release:
        description: 'Build Release binaries'
        required: false
        type: boolean

# Set the build type here
env:
  B_BUILD_TYPE: ${{ (inputs.build_release || github.event_name == 'release') && 'Release' || 'Debug' }}
  DEBIAN_FRONTEND: noninteractive

jobs:
  win-build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, windows-2022]

    steps:
      - uses: actions/checkout@v3
        with:
          path: input-leap
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
          architecture: 'x64'

      - name: Download Bonjour SDK-like
        id: bonjour
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -Force -ItemType Directory -Path .\deps

          Invoke-WebRequest 'https://github.com/nelsonjchen/mDNSResponder/releases/download/v2019.05.08.1/x64_RelWithDebInfo.zip' -OutFile 'deps\BonjourSDKLike.zip' ;
          Expand-Archive .\deps\BonjourSDKLike.zip -DestinationPath .\deps\BonjourSDKLike
          Remove-Item deps\BonjourSDKLike.zip

          "path=$env:GITHUB_WORKSPACE\deps\BonjourSDKLike" >> $env:GITHUB_OUTPUT

      - name: Installing QT
        id: qt
        run: |
          $ErrorActionPreference = "Stop"
          New-Item -Force -ItemType Directory -Path .\deps

          $qli_install_version = '2019.05.26.1'
          $qt_version = '5.15.2'
          $qt_msvc = 'msvc2019_64'

          Invoke-WebRequest "https://github.com/nelsonjchen/qli-installer/archive/v$qli_install_version.zip" -OutFile '.\deps\qli-installer.zip' ;
          Expand-Archive deps\qli-installer.zip deps\
          Move-Item .\deps\qli-installer-$qli_install_version\ .\deps\qli-installer

          pip install -r .\deps\qli-installer\requirements.txt

          $env:QLI_OUT_DIR = ".\deps\Qt\Qt$qt_version"
          $env:QLI_BASE_URL = "https://download.qt.io/online/qtsdkrepository/"
          python .\deps\qli-installer\qli-installer.py $qt_version windows desktop win64_$qt_msvc

          "root=$env:GITHUB_WORKSPACE\deps\Qt" >> $env:GITHUB_OUTPUT
          "version=Qt$qt_version\$qt_version" >> $env:GITHUB_OUTPUT
          "msvc=$qt_msvc" >> $env:GITHUB_OUTPUT
          "path=$env:GITHUB_WORKSPACE\deps\Qt\Qt$qt_version\$qt_version\$qt_msvc" >> $env:GITHUB_OUTPUT

      - name: Configure build system
        # NB. use cmd here to set variables from VsDevCmd.bat
        shell: cmd
        run: |
          call "%VS_PATH%\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64

          cmake -S input-leap -B build -G "%CMAKE_GEN%" -A x64 -D CMAKE_BUILD_TYPE=%B_BUILD_TYPE% ^
            -DCMAKE_PREFIX_PATH="%B_QT_FULLPATH%" -DQT_VERSION="%B_QT_VER%" ^
            -DDNSSD_LIB="%BONJOUR_SDK_HOME%\Lib\x64\dnssd.lib"
        env:
          VS_PATH: ${{ matrix.os == 'windows-2019' && '%ProgramFiles(x86)%\Microsoft Visual Studio\2019' || '%ProgramFiles%\Microsoft Visual Studio\2022' }}
          CMAKE_GEN: ${{ matrix.os == 'windows-2019' && 'Visual Studio 16 2019' || 'Visual Studio 17 2022' }}
          BONJOUR_SDK_HOME: ${{ steps.bonjour.outputs.path }}
          B_QT_ROOT: ${{ steps.qt.outputs.root }}
          B_QT_VER: ${{ steps.qt.outputs.version }}
          B_QT_MSVC: ${{ steps.qt.outputs.msvc }}
          B_QT_FULLPATH: ${{ steps.qt.outputs.path }}

      - name: Run build system
        run: |
          cmake --build build --config $env:B_BUILD_TYPE

      - name: Copy supporting binaries
        run: |
          copy $env:B_QT_FULLPATH\bin\Qt5Core$env:LIB_SUFFIX.dll $env:BIN_PATH\
          copy $env:B_QT_FULLPATH\bin\Qt5Gui$env:LIB_SUFFIX.dll $env:BIN_PATH\
          copy $env:B_QT_FULLPATH\bin\Qt5Network$env:LIB_SUFFIX.dll $env:BIN_PATH\
          copy $env:B_QT_FULLPATH\bin\Qt5Widgets$env:LIB_SUFFIX.dll $env:BIN_PATH\

          mkdir $env:BIN_PATH\platforms\
          copy $env:B_QT_FULLPATH\plugins\platforms\qwindows$env:LIB_SUFFIX.dll $env:BIN_PATH\platforms\

          copy input-leap\ext\openssl\windows\x64\bin\*.dll $env:BIN_PATH\
        env:
          # NB: donâ€™t put '' before || as it is falsey
          LIB_SUFFIX: ${{ env.B_BUILD_TYPE == 'Debug' && 'd' || '' }}
          B_QT_FULLPATH: ${{ steps.qt.outputs.path }}
          BIN_PATH: build\bin\${{ env.B_BUILD_TYPE }}

      - name: Archive Completed Build Directory
        uses: vimtor/action-zip@v1
        with:
          files: build\bin\${{ env.B_BUILD_TYPE }}
          dest: ${{ env.B_BUILD_TYPE }}.zip

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ env.B_BUILD_TYPE }}
          path: ${{ env.B_BUILD_TYPE }}.zip
          if-no-files-found: warn

      # Only build & upload installer for release builds on windows-2022
      - name: Build the Installer
        if: matrix.os == 'windows-2022' && env.B_BUILD_TYPE == 'Release'
        run: |
          & "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe" /Qp .\build\installer-inno\input-leap.iss

      - uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-2022' && env.B_BUILD_TYPE == 'Release'
        with:
          name: windows-installer
          path: .\build\installer-inno\bin
          if-no-files-found: error
